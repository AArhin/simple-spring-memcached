#summary The current plan for the upcoming releases.
#labels Phase-Requirements

== Base Assumptions ==
  * Each version fully unit tested
  * Each version fully integration tested
----


= Version 3 =

== 3.1.0 (In Progress) ==
  * Issue 8: Instead of default toString() use @CacheKeyMethod from superclass (*Done*)
  * Issue 11: Ability to order the cache advice (*Done*)
  * Improve quality of SSM using Continuous Integration:  [https://ragnor.ci.cloudbees.com/job/SSM/ Jenkins at CloudBees] (*Done*)
  * Create maven plugin to run embedded memcached and use it in integration tests on [https://ragnor.ci.cloudbees.com/job/SSM/ Jenkins] (*In Progress*) 

== ~~3.0.3~~ (Rejected and moved to 3.1.0) ==
  * Issue 8: Instead of default toString() use @CacheKeyMethod from superclass (*Done*)

== 3.0.2 (Done) ==
  * Issue 6: CacheFactory should be a DisposableBean to permit server shutdown (*Done*)

== 3.0.1 (Done) ==
  * Issue 5: Default log4j.properties in deployed maven artifact (*Done*)

== 3.0.0 (Done) ==
  * Issue 2: Providers (spymemcached and xmemcached) in separated modules (*Done*)
  * Issue 3: Support a Spring 3.1 [http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/cache/Cache.html Cache] / [http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/cache/CacheManager.html CacheManager] implementation (*Done*)
  * Sample project [http://code.google.com/p/simple-spring-memcached/source/browse/#svn%2Ftrunk%2Fspring-cache-integration-test spring-cache-integration-test] that shows how to use SSM as a Spring Cache backend (*Done*)
  * Per method expiration time while using SSM as a backend for Spring 3.1 Cache (*Done*)
  * Custom default transcoder (*Done*)
  * Rewrite serialization logic, for each type: java, json or custom serialization can be used (*Done*)
  * In case of json serialization store information about serialized type (*Done*)
  * Remove dependency to external maven repositories, deploy spymemcached to central maven repo (*Done*)

= Version 2 =

== ~~2.1.0~~ (Rejected and moved to 3.0.0) ==
  * Issue 2: Providers in separated modules
  * Issue 3: Support a Spring 3.1 [http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/cache/Cache.html Cache] / [http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/cache/CacheManager.html CacheManager] implementation
  * Custom default transcoder


== 2.0.0 (Done) ==
  * Inline parameter annotation, rather than an integer _keyIndex_, to identify the object that will provide the key (*Done*)
  * Cache key can be generated using several input method's parameters (*Done*)
  * Counters support: increment, decrement, update (overwrite) and read (*Done*)
  * ~~Ability for the key generation to be done via a referenced bean that adheres to a SSM-specified interface~~
  * Runtime memcached node switching. IPs of memcached servers can be modified in the fly without redeploying application (*Done*)
  * Object can be serialized to json, pluggable json transcoders mechanism configurable per class (*Done*)
  * Support different memcached clients: [http://code.google.com/p/spymemcached/ spymemcached] and [http://code.google.com/p/xmemcached/ xmemcached] (*Done*)
  * Integration with Spring 3 (*Done*)
  * Order of missed keys are the same as order of input arguments in intercepted method (*Done*)
  * Extend [https://simple-spring-memcached.googlecode.com/svn/docs/2.0.0/apidocs/com/google/code/ssm/api/ReadThroughMultiCache.html ReadThroughMultiCache] with options to:
    * generate cache key from result, objects from result will be added to cache not by concatenating method arguments but invoking  [https://simple-spring-memcached.googlecode.com/svn/docs/2.0.0/apidocs/com/google/code/ssm/api/CacheKeyMethod.html CacheKeyMethod] on each object in result list (*Done*)
    * skip null values in result (*Done*)
    * add null values to cache under keys that don't occurred in result list (*Done*)
  * Extend [https://simple-spring-memcached.googlecode.com/svn/docs/2.0.0/apidocs/com/google/code/ssm/api/UpdateMultiCache.html UpdateMultiCache] with options to:
    * add null values to cache under keys ([https://simple-spring-memcached.googlecode.com/svn/docs/2.0.0/apidocs/com/google/code/ssm/api/ParameterValueKeyProvider.html @ParameterValueKeyProvider] + [https://simple-spring-memcached.googlecode.com/svn/docs/2.0.0/apidocs/com/google/code/ssm/api/ReturnValueKeyProvider.html @ReturnValueKeyProvider]) \ ([https://simple-spring-memcached.googlecode.com/svn/docs/2.0.0/apidocs/com/google/code/ssm/api/ParameterDataUpdateContent.html @ParameterDataUpdateContent] + [https://simple-spring-memcached.googlecode.com/svn/docs/2.0.0/apidocs/com/google/code/ssm/api/ReturnDataUpdateContent.html @ReturnDataUpdateContent]) (*Done*)
  * Cache zones - instead of one global cache many caches using different providers, servers and configuration can be defined (*Done*)
  * ~~Custom spring namespace (ssm)~~ (*moved to 2.?.0*) 
  * [http://code.google.com/p/simple-spring-memcached/wiki/UserGuide#Disabling_cache Cache Disabling] (*Done*)  
  * Deploy artifacts to maven central repository (*Done*) 

----
= Version 1 =

== ~~1.0.0~~ (Done) ==
  * If there's no problems with RC1, publish a full 1.0 version

== ~~1.0.0-RC1~~ (Done) ==
  * Package up a 'code complete' set for release to the wild.

== ~~0.11~~ (Done) ==
  * DOCUMENTATION IN PREPARATION FOR 1.0 RELEASE

== ~~0.10~~ (Done) ==
  * Fix Update*Cache. They assume the output is the source of the cachable data.

== ~~0.9~~ (Done) ==
  * Update individual item cache by assigned id

== ~~0.8~~ (Done) ==
  * Invalidate individual item cache by assigned id

== ~~0.7~~ (Done) ==
  * Read-through individual item cache by assigned id

== ~~0.6~~ (Done) ==
  * Invalidate multiplexed item cache

== ~~0.5~~ (Done) ==
  * Invalidate individual item cache

== ~~0.4~~ (Done) ==
  * Update multiplexed item cache

== ~~0.3~~ (Done) ==
  * Update individual item cache

== ~~0.2~~ (Done) ==
  * Read-through multiplexed item cache

== ~~0.1~~ (Done) ==
  * Read-through individual item cache